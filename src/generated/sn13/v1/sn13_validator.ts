// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: sn13/v1/sn13_validator.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "sn13.v1";

/** ListTopicsRequest is the request message for getting the top topics */
export interface ListTopicsRequest {
  /** source: the source to validate */
  source: string;
}

/** ListTopicsResponseDetail is the response message for getting the top topics */
export interface ListTopicsResponseDetail {
  /** label_value: reddit or x topic */
  labelValue: string;
  /** content_size_bytes: content size in bytes */
  contentSizeBytes: number;
  /** adj_content_size_bytes: adjacent content size in bytes */
  adjContentSizeBytes: number;
}

/** ListTopicsResponse is a list of ListTopicsResponseDetail(s) with top topics */
export interface ListTopicsResponse {
  /** message: the response message */
  details: ListTopicsResponseDetail[];
}

/** ValidateTopicRequest is the request message for validating a reddit topic */
export interface ValidateRedditTopicRequest {
  /** topic: the topic to validate */
  topic: string;
}

/** ValidateTopicResponse is the response message for validating a topic */
export interface ValidateRedditTopicResponse {
  /** platform: i.e. reddit */
  platform: string;
  /** topic: the topic to validate */
  topic: string;
  /** exists: whether the topic exists */
  exists: boolean;
  /** over18: whether the topic is NSFW */
  over18: boolean;
  /** quarantine: whether the topic is quarantined */
  quarantine: boolean;
}

function createBaseListTopicsRequest(): ListTopicsRequest {
  return { source: "" };
}

export const ListTopicsRequest: MessageFns<ListTopicsRequest> = {
  encode(
    message: ListTopicsRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.source !== "") {
      writer.uint32(10).string(message.source);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTopicsRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTopicsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.source = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTopicsRequest {
    return {
      source: isSet(object.source) ? globalThis.String(object.source) : "",
    };
  },

  toJSON(message: ListTopicsRequest): unknown {
    const obj: any = {};
    if (message.source !== "") {
      obj.source = message.source;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTopicsRequest>): ListTopicsRequest {
    return ListTopicsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTopicsRequest>): ListTopicsRequest {
    const message = createBaseListTopicsRequest();
    message.source = object.source ?? "";
    return message;
  },
};

function createBaseListTopicsResponseDetail(): ListTopicsResponseDetail {
  return { labelValue: "", contentSizeBytes: 0, adjContentSizeBytes: 0 };
}

export const ListTopicsResponseDetail: MessageFns<ListTopicsResponseDetail> = {
  encode(
    message: ListTopicsResponseDetail,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.labelValue !== "") {
      writer.uint32(10).string(message.labelValue);
    }
    if (message.contentSizeBytes !== 0) {
      writer.uint32(16).uint64(message.contentSizeBytes);
    }
    if (message.adjContentSizeBytes !== 0) {
      writer.uint32(24).uint64(message.adjContentSizeBytes);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ListTopicsResponseDetail {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTopicsResponseDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.labelValue = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.contentSizeBytes = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.adjContentSizeBytes = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTopicsResponseDetail {
    return {
      labelValue: isSet(object.labelValue)
        ? globalThis.String(object.labelValue)
        : "",
      contentSizeBytes: isSet(object.contentSizeBytes)
        ? globalThis.Number(object.contentSizeBytes)
        : 0,
      adjContentSizeBytes: isSet(object.adjContentSizeBytes)
        ? globalThis.Number(object.adjContentSizeBytes)
        : 0,
    };
  },

  toJSON(message: ListTopicsResponseDetail): unknown {
    const obj: any = {};
    if (message.labelValue !== "") {
      obj.labelValue = message.labelValue;
    }
    if (message.contentSizeBytes !== 0) {
      obj.contentSizeBytes = Math.round(message.contentSizeBytes);
    }
    if (message.adjContentSizeBytes !== 0) {
      obj.adjContentSizeBytes = Math.round(message.adjContentSizeBytes);
    }
    return obj;
  },

  create(
    base?: DeepPartial<ListTopicsResponseDetail>,
  ): ListTopicsResponseDetail {
    return ListTopicsResponseDetail.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListTopicsResponseDetail>,
  ): ListTopicsResponseDetail {
    const message = createBaseListTopicsResponseDetail();
    message.labelValue = object.labelValue ?? "";
    message.contentSizeBytes = object.contentSizeBytes ?? 0;
    message.adjContentSizeBytes = object.adjContentSizeBytes ?? 0;
    return message;
  },
};

function createBaseListTopicsResponse(): ListTopicsResponse {
  return { details: [] };
}

export const ListTopicsResponse: MessageFns<ListTopicsResponse> = {
  encode(
    message: ListTopicsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.details) {
      ListTopicsResponseDetail.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ListTopicsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTopicsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.details.push(
            ListTopicsResponseDetail.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTopicsResponse {
    return {
      details: globalThis.Array.isArray(object?.details)
        ? object.details.map((e: any) => ListTopicsResponseDetail.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListTopicsResponse): unknown {
    const obj: any = {};
    if (message.details?.length) {
      obj.details = message.details.map(e =>
        ListTopicsResponseDetail.toJSON(e),
      );
    }
    return obj;
  },

  create(base?: DeepPartial<ListTopicsResponse>): ListTopicsResponse {
    return ListTopicsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTopicsResponse>): ListTopicsResponse {
    const message = createBaseListTopicsResponse();
    message.details =
      object.details?.map(e => ListTopicsResponseDetail.fromPartial(e)) || [];
    return message;
  },
};

function createBaseValidateRedditTopicRequest(): ValidateRedditTopicRequest {
  return { topic: "" };
}

export const ValidateRedditTopicRequest: MessageFns<ValidateRedditTopicRequest> =
  {
    encode(
      message: ValidateRedditTopicRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.topic !== "") {
        writer.uint32(10).string(message.topic);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): ValidateRedditTopicRequest {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseValidateRedditTopicRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.topic = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): ValidateRedditTopicRequest {
      return {
        topic: isSet(object.topic) ? globalThis.String(object.topic) : "",
      };
    },

    toJSON(message: ValidateRedditTopicRequest): unknown {
      const obj: any = {};
      if (message.topic !== "") {
        obj.topic = message.topic;
      }
      return obj;
    },

    create(
      base?: DeepPartial<ValidateRedditTopicRequest>,
    ): ValidateRedditTopicRequest {
      return ValidateRedditTopicRequest.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<ValidateRedditTopicRequest>,
    ): ValidateRedditTopicRequest {
      const message = createBaseValidateRedditTopicRequest();
      message.topic = object.topic ?? "";
      return message;
    },
  };

function createBaseValidateRedditTopicResponse(): ValidateRedditTopicResponse {
  return {
    platform: "",
    topic: "",
    exists: false,
    over18: false,
    quarantine: false,
  };
}

export const ValidateRedditTopicResponse: MessageFns<ValidateRedditTopicResponse> =
  {
    encode(
      message: ValidateRedditTopicResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.platform !== "") {
        writer.uint32(10).string(message.platform);
      }
      if (message.topic !== "") {
        writer.uint32(18).string(message.topic);
      }
      if (message.exists !== false) {
        writer.uint32(24).bool(message.exists);
      }
      if (message.over18 !== false) {
        writer.uint32(32).bool(message.over18);
      }
      if (message.quarantine !== false) {
        writer.uint32(40).bool(message.quarantine);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): ValidateRedditTopicResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseValidateRedditTopicResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.platform = reader.string();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.topic = reader.string();
            continue;
          }
          case 3: {
            if (tag !== 24) {
              break;
            }

            message.exists = reader.bool();
            continue;
          }
          case 4: {
            if (tag !== 32) {
              break;
            }

            message.over18 = reader.bool();
            continue;
          }
          case 5: {
            if (tag !== 40) {
              break;
            }

            message.quarantine = reader.bool();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): ValidateRedditTopicResponse {
      return {
        platform: isSet(object.platform)
          ? globalThis.String(object.platform)
          : "",
        topic: isSet(object.topic) ? globalThis.String(object.topic) : "",
        exists: isSet(object.exists)
          ? globalThis.Boolean(object.exists)
          : false,
        over18: isSet(object.over18)
          ? globalThis.Boolean(object.over18)
          : false,
        quarantine: isSet(object.quarantine)
          ? globalThis.Boolean(object.quarantine)
          : false,
      };
    },

    toJSON(message: ValidateRedditTopicResponse): unknown {
      const obj: any = {};
      if (message.platform !== "") {
        obj.platform = message.platform;
      }
      if (message.topic !== "") {
        obj.topic = message.topic;
      }
      if (message.exists !== false) {
        obj.exists = message.exists;
      }
      if (message.over18 !== false) {
        obj.over18 = message.over18;
      }
      if (message.quarantine !== false) {
        obj.quarantine = message.quarantine;
      }
      return obj;
    },

    create(
      base?: DeepPartial<ValidateRedditTopicResponse>,
    ): ValidateRedditTopicResponse {
      return ValidateRedditTopicResponse.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<ValidateRedditTopicResponse>,
    ): ValidateRedditTopicResponse {
      const message = createBaseValidateRedditTopicResponse();
      message.platform = object.platform ?? "";
      message.topic = object.topic ?? "";
      message.exists = object.exists ?? false;
      message.over18 = object.over18 ?? false;
      message.quarantine = object.quarantine ?? false;
      return message;
    },
  };

export type Sn13ServiceService = typeof Sn13ServiceService;
export const Sn13ServiceService = {
  /** ListTopics is the RPC method for getting the top topics */
  listTopics: {
    path: "/sn13.v1.Sn13Service/ListTopics",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListTopicsRequest) =>
      Buffer.from(ListTopicsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListTopicsRequest.decode(value),
    responseSerialize: (value: ListTopicsResponse) =>
      Buffer.from(ListTopicsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListTopicsResponse.decode(value),
  },
  validateRedditTopic: {
    path: "/sn13.v1.Sn13Service/ValidateRedditTopic",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ValidateRedditTopicRequest) =>
      Buffer.from(ValidateRedditTopicRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      ValidateRedditTopicRequest.decode(value),
    responseSerialize: (value: ValidateRedditTopicResponse) =>
      Buffer.from(ValidateRedditTopicResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      ValidateRedditTopicResponse.decode(value),
  },
} as const;

export interface Sn13ServiceServer extends UntypedServiceImplementation {
  /** ListTopics is the RPC method for getting the top topics */
  listTopics: handleUnaryCall<ListTopicsRequest, ListTopicsResponse>;
  validateRedditTopic: handleUnaryCall<
    ValidateRedditTopicRequest,
    ValidateRedditTopicResponse
  >;
}

export interface Sn13ServiceClient extends Client {
  /** ListTopics is the RPC method for getting the top topics */
  listTopics(
    request: ListTopicsRequest,
    callback: (
      error: ServiceError | null,
      response: ListTopicsResponse,
    ) => void,
  ): ClientUnaryCall;
  listTopics(
    request: ListTopicsRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: ListTopicsResponse,
    ) => void,
  ): ClientUnaryCall;
  listTopics(
    request: ListTopicsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: ListTopicsResponse,
    ) => void,
  ): ClientUnaryCall;
  validateRedditTopic(
    request: ValidateRedditTopicRequest,
    callback: (
      error: ServiceError | null,
      response: ValidateRedditTopicResponse,
    ) => void,
  ): ClientUnaryCall;
  validateRedditTopic(
    request: ValidateRedditTopicRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: ValidateRedditTopicResponse,
    ) => void,
  ): ClientUnaryCall;
  validateRedditTopic(
    request: ValidateRedditTopicRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: ValidateRedditTopicResponse,
    ) => void,
  ): ClientUnaryCall;
}

export const Sn13ServiceClient = makeGenericClientConstructor(
  Sn13ServiceService,
  "sn13.v1.Sn13Service",
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): Sn13ServiceClient;
  service: typeof Sn13ServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
